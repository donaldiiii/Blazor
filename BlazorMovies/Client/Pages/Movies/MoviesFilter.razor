@page "/movies/search"
@using BlazorMovies.Shared.DTOs
@inject IMovieRepository moviesRepository
@inject IGenreRepository genreRepository
@inject NavigationManager navigationManager

<h3>MoviesFilter</h3>
<EditForm Model="filterMoviesDTO">
    <div class="form-inline">
        <div class="form-group">
            <label> TItle</label>
            <input type="text" class="form-control" id="title"
                   @bind-value="filterMoviesDTO.Title" @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))" />
        </div>
        <div class="form-group" mx-sm-3 mb-2>
            <select class="form-control" @bind="filterMoviesDTO.GenreId">
                <option value="0">
                    --Select Genre
                </option>
                @foreach (var genre in Genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
            </select>
        </div>
        <div class="form-group" mx-sm-3 mb-2>
            <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="filterMoviesDTO.UpcomingReleases" />
            <label>upcomingReleases</label>
        </div>
        <div class="form-group" mx-sm-3 mb-2>
            <input type="checkbox" class="form-check-input" id="inTheaters" @bind="filterMoviesDTO.InTheaters" />
            <label>inTheaters</label>
        </div>
        <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="SearchForMovies"> Filter </button>
        <button type="button" class="btn btn-danger mb-2 mx-sm-3" @onclick="Clear"> Clear </button>
    </div>
</EditForm>
<MoviesList Movies="Movies"></MoviesList>

<Pagination CurrentPage="filterMoviesDTO.Page" TotalAmountPages="totalAmountPages"
        SelectedPage="SelectedPage" />
@code {
    List<Movie> Movies = new List<Movie>();
    FilterMoviesDTO filterMoviesDTO = new FilterMoviesDTO(){};
    int totalAmountPages;
    string title = "";
    string selectedGenre = "";
    private List<Genre> Genres = new List<Genre>(){ new Genre(){ Id =1, Name="Wee"},
                                 new Genre(){ Id=2,Name="Waa"}};
    bool inTheaters = false;
    bool upcomingReleases = false;

    protected override async Task OnInitializedAsync()
    {
        var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
        Genres = await genreRepository.GetGenre();
        if(queryStrings != null)
        {
              FillFilterWithQueryStrings(queryStrings);
        }            
        await LoadMovies();

    }
    
    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("genreId"))
        {
            filterMoviesDTO.GenreId = int.Parse(queryStrings["genreId"]);
        }

        if (queryStrings.ContainsKey("title"))
        {
            filterMoviesDTO.Title = queryStrings["title"];
        }

        if (queryStrings.ContainsKey("intheaters"))
        {
            filterMoviesDTO.UpcomingReleases = bool.Parse(queryStrings["intheaters"]);
        }

        if (queryStrings.ContainsKey("upcomingReleases"))
        {
            filterMoviesDTO.UpcomingReleases = bool.Parse(queryStrings["upcomingReleases"]);
        }

        if (queryStrings.ContainsKey("page"))
        {
            filterMoviesDTO.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task SelectedPage(int page)
    {
        filterMoviesDTO.Page = page;
        await LoadMovies();
    }
    private async Task LoadMovies()
    {
         var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navigationManager.NavigateTo("movies/search" + queryString);
        }
        var paginatedResponse = await moviesRepository.GetMoviesFiltered(filterMoviesDTO);
        Movies = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }
    
    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["genreId"] = filterMoviesDTO.GenreId.ToString();
        queryStringsDict["title"] = filterMoviesDTO.Title ?? "";
        queryStringsDict["intheaters"] = filterMoviesDTO.InTheaters.ToString();
        queryStringsDict["upcomingReleases"] = filterMoviesDTO.UpcomingReleases.ToString();
        queryStringsDict["page"] = filterMoviesDTO.Page.ToString();

        var defaultValue = new List<string>() { "false", "", "0" };


        return string.Join("&", queryStringsDict
            .Where(x => !defaultValue.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

    }
    private async Task SearchForMovies()
    {
        await LoadMovies();
    }


    private async Task Clear()
    {
        filterMoviesDTO.Title = "";
        filterMoviesDTO.GenreId = 0;
        filterMoviesDTO.InTheaters = false;
        filterMoviesDTO.UpcomingReleases = false;
        await LoadMovies();
    }
    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
           await SearchForMovies();
        }
    }
}
